# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XKaj693rIoHSbebUWX4fX-vIEuTK6ZWw
"""

# Importing libraries and loading the dataset
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
data = pd.read_csv('/content/cereal dataset.csv')
data.info()  # Checking data types and non-null counts
data.head()  # Displaying first few rows of the dataset

# Summary statistics
data.describe()

missing_values = data.isnull().sum()
print("Missing values in each column:\n", missing_values)

from sklearn.preprocessing import MinMaxScaler

# numerical columns
numerical_features = ['calories', 'protein', 'fat', 'sodium', 'fiber', 'carbo', 'sugars', 'potass', 'vitamins', 'weight', 'cups']

#scaler and applying to numerical features
scaler = MinMaxScaler()
data_encoded[numerical_features] = scaler.fit_transform(data_encoded[numerical_features])
data_encoded.head()

# Applying One-Hot Encoding
data_encoded = pd.get_dummies(data, columns=['mfr', 'type'])
data_encoded.head()

from sklearn.preprocessing import MinMaxScaler

# Defining numerical columns
numerical_features = ['calories', 'protein', 'fat', 'sodium', 'fiber', 'carbo', 'sugars', 'potass', 'vitamins', 'weight', 'cups']

# Assuming 'data' is your original dataframe, create a copy for encoding:
data_encoded = data.copy()  # Create a copy to avoid modifying the original dataframe

# Initializing scaler and applying to numerical features
scaler = MinMaxScaler()
data_encoded[numerical_features] = scaler.fit_transform(data_encoded[numerical_features])
data_encoded.head()

# Importing libraries and loading the dataset
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
data = pd.read_csv('/content/cereal dataset.csv')
data.info()  # Checking data types and non-null counts
data.head()  # Displaying first few rows of the dataset

# Summary statistics
data.describe()

# Histogram of calories
plt.figure(figsize=(10, 6))
data['calories'].plot(kind='hist', bins=10, color='skyblue')
plt.title('Distribution of Calories')
plt.xlabel('Calories')
plt.show()

# Bar chart of manufacturer distribution
plt.figure(figsize=(10, 6))
data['mfr'].value_counts().plot(kind='bar', color='orange')
plt.title('Cereal Manufacturer Distribution')
plt.xlabel('Manufacturer')
plt.ylabel('Count')
plt.show()

# Heatmap of correlations
plt.figure(figsize=(12, 8))
# Select only numeric columns for correlation calculation
numeric_data = data.select_dtypes(include=['number'])
sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

